[daemon]

; unique company id.  Created for you when registering with OpenALPR Cloud
company_id = WMB

; country determines the training dataset used for recognizing plates.  
; Valid values can be found in /usr/share/openalpr/runtime_data/config
country = br

; Declare each stream on a separate line.
; each unique stream should be defined as stream = [url]

; Example stream config:
; Streams should be configured as a unique .conf file in the /etc/openalpr/stream.d/ directory
; Each stream.conf connects to a single camera.  It must contain the following variable:
;   stream = http://127.0.0.1/example_video_stream.mjpeg
; It may also contain:
;  prewarp = [Prewarp calibration value]
;  detection_mask_image = [path to black/white mask image]


; Enable a fail safe timeout to restart the service if processing becomes hung
fail_safe_enabled = 1

; topn is the number of possible plate character variations to report
topn = 10

; Applies a pattern against the results to improve accuracy.  Patterns are located in 
; runtime_data/postprocess/[country].patterns. For example using a value of la would compare 
; against the Louisiana license plate templates (letter-letter-letter-number-number-number)
; OpenALPR state recognition in the USA is highly accurate and will auto-detect the state if this value is left unchanged
pattern = 


; Agrupamento de Placas
; ============================================================================
; Plate grouping looks for similar plates during the same time period
plate_groups_enabled = 1
; The maximum time between matching plate reads
plate_groups_time_delta_ms = 1800
; Form a group after at least this many similar plates are seen
plate_groups_min_plates_to_group = 4
; Ignore plates (for the purposes of grouping) with a lower confidence
plate_groups_min_confidence = 80.0
; Stop a single group at this number to avoid memory explosion
plate_groups_max_plates_to_group = 2500
; Send a preview group result before the vehicle has left the scene.  This is useful for 
; real-time use-cases such as access control
plate_group_enable_preview = 0
; The number of plate reads before sending a preview.  A higher number leads to more accurate results on 
; previews but adds delay
plate_group_preview_min_reads = 5
; Combine all reads from all cameras on this agent to one group.
; This is useful when the cameras are viewing the same vehicles at the same time
plate_groups_span_cameras = 0
; ============================================================================


; Track vehicles and upload when a plate is not recognized.  Vehicle classification must be enabled as well
vehicle_tracking_enabled = 1

; A ratio (between 0 and 1.0) of how often to generate vehicle tracking signatures.  Lowering this value improves speed
; but also makes it more likely to miss tracking a vehicle.  This parameter does not affect license plate recognition
vehicle_tracking_sample_rate = 0.7

; Parked car detection filters group entries for sequential plate results that have not moved
; These parameters control the sensitivity used for detecting these situations
parked_car_detection_enabled = 1

; How long to wait between subsequent recognitions before forgetting about the parked car
parked_car_max_delta_ms = 180000

; How close from the previous location (as a percentage of the plate size) must the plate be to 
; consider it parked
parked_car_max_distance_multiplier = 1.2

; How many character differences between plates will we allow to consider the plate the same
parked_car_max_text_distance = 1

; Motion stickiness determines how long the motion detection lingers on a particular area 
; where motion has recently been detected.  When vehicles wait at a stop sign, 
; high stickiness would be best, so that the plate continues to read while the vehicle is not moving. 
; If capturing on a fast-moving highway, low stickiness would be better.
; Values should be specified between 0 (low stickiness) and 100 (high stickiness)
motion_stickiness = 60.0


; Configuração de armazenamento de imagens
; ============================================================================
; O daemon comercial mantém uma cota máxima de disco e 
; limpa automaticamente depois de si mesmo. 
; As imagens armazenadas no disco são removidas com base em FIFO.
    ; Esses parâmetros controlam a localização, a qualidade da imagem e 
    ; o tamanho máximo do armazenamento local de imagens.

; Determines whether images that contain plates should be stored to disk
store_plates = 1
; JPEG image quality (between 1 and 100).  Filesize increases exponentially as quality approaches 100
store_plates_jpeg_quality = 85
; The location on disk to store the plate images
store_plates_location = /var/lib/openalpr/plateimages
; The maximum size allowed for plate images.  Older plates will be automatically deleted to save new plates.
store_plates_maxsize_gb = 8
; Configure a maximum width/height for JPEG storage.  Images will be downsampled prior to storing.  This saves storage space 
; and increases performance by reducing JPEG encoding time.  Set to -1 for no limit (use the true size of the input video)
store_plates_jpeg_max_width = 1920
; Configure a maximum width/height for JPEG storage.  Images will be downsampled prior to storing.  This saves storage space 
; and increases performance by reducing JPEG encoding time.  Set to -1 for no limit (use the true size of the input video)
store_plates_jpeg_max_height = 1080
; Store one image per vehicle, do not retain images for individual plate reads
store_only_group_images = 1
; ============================================================================


; Whether or not to store h264 video clips to the local filesystem.  Storing video provides light NVR 
; functionality within the OpenALPR web interface.  The video stream must be configured for rtsp over h264 
store_video = 0

; Location used to store video clips in a rolling database
store_video_location = /var/lib/openalpr/videoclips

; Maximum disk space used to store video data.  Older video clips will be automatically deleted to make 
; room for new video clips.
store_video_maxsize_gb = 20


; Configuração de Upload
; ============================================================================
; Você pode habilitar ou desabilitar o upload. 
; Quando o agente estiver em execução, todos os resultados da placa 
; serão primeiro colocados em uma fila local do beanstalkd. 
; Se o parâmetro upload_data for definido como “1” para ativado, 
; o agente extrairá os resultados da fila e os enviará para o terminal 
; upload_address configurado como um HTTP POST. 
; O upload_threads parâmetro especificará o número de uploads de dados simultâneos. 
; Geralmente, o número de encadeamentos só precisa ser aumentado se o servidor da Web 
; for lento para responder ou a latência da rede for excepcionalmente alta.

; Whether or not to upload data.  If disabled, results will queue on the local beanstalkd queue
upload_data = 0
; The destination URL where OpenALPR will post data
upload_address = https://localhost:8080/plate
; Concurrent threads used for uploading.  Higher threads help push data over high latency connections.
upload_threads = 6
; Whether to upload plate group and vehicle data
upload_groups = 1
; Whether to upload individual plate reads
upload_single_plates = 0
; Save to another beanstalkd tube.  Useful for integrating with other software 
; while still using the ALPR service to upload.  
; If enabled, your process must drain the queue otherwise results will build up in memory
upload_write_second_tube = 0
; Specifies the second beanstalkd tube name to write to
upload_write_second_tube_name = alprd-alt
; Specifies whether to upload the data on the second queue or leave it on the beanstalkd tube
upload_second_tube_post_enabled = 0
; Specifies destination address to post second tube data when enabled
upload_second_tube_post_url = http://localhost/
; When uploads are delayed (e.g., due to an internet outage) how long should plates be considered valid 
; before dropping them.  By default (-1), plates will never be dropped.  For more real-time use cases, old plates may 
; not be useful and sending a large backlog after being offline may not be useful
upload_oldest_plate_seconds = -1
; ============================================================================


; Whether to use beanstalkd (external process) to queue results or an in-memory process
; For Windows systems, it's recommended to use in-memory for best stability
use_beanstalkd = 1

; Websockets enable secure agent management and on-demand image transfers
websockets_enabled = 0


; Detecção de Movimento
; ============================================================================
; A detecção de movimento melhora a eficiência e extrai mais leituras de placas dos 
; processadores disponíveis. 
; O processamento ALPR analisa apenas os quadros com movimento, 
; ignorando áreas da imagem que não foram alteradas. 
; Este parâmetro controla se a detecção de movimento está habilitada (1) ou desabilitada (0).

; Use motion detection to ignore non-moving regions.  Increases speed and efficiency
motion_detection = 1
; ============================================================================


; Processamento Paralelo
; ============================================================================
; O processamento ALPR ocorre em paralelo, cada thread consome um núcleo de CPU inteiro. 
; Alocar mais CPUs para processamento ALPR aumentará linearmente 
; o número de leituras de placas por segundo. 
; Se você deseja maximizar o processamento ALPR em seu hardware, 
; esse número deve mapear o número de núcleos de CPU disponíveis no sistema.

; Number of CPU cores allowed to be used for ALPR processing
analysis_threads = half
; Priority of analysis threads.  Must be -1, 0, or 1
; -1 allows other processes CPU priority over OpenALPR processing.  0 is normal procesing, 1 is high priority
; Recommended value is -1
analysis_priority = -1
; ============================================================================


; Recuperação de Imagem
; ============================================================================
; This webservice provides plate images on request.  
web_server_enabled = 1
; Port used to host the OpenALPR daemon web service.  
web_server_port = 8355
; Show debug information in the local webservice.  
; This is useful during development but should be disabled in production
web_server_debug = 1
; Address used to bind the webservice.  Set this to a value of 127.0.0.1 to not allow any remote connections
web_service_bind_address = 0.0.0.0
; ============================================================================


; Enable an MJPEG server to see the output from plate processing in a web browser
mjpeg_server_enabled = 0

; Port to expose MJPEG server
mjpeg_server_port = 8356

; Address used to bind the MJPEG server.  Set this to a value of 127.0.0.1 to not allow any remote connections
mjpeg_server_bind_address = 0.0.0.0

; Enable/disable make/model/color/bodytype detection for each plate group
classify_vehicles = 1

; User data is an arbitrary string value that is sent in the payload with every result for this agent
user_data =

; Filter log messages based on their severity.  Options are DEBUG, INFO, WARN, ERROR
log_level = DEBUG


; Processamento de Buffer Traseiro
; ============================================================================
; Com a detecção de movimento habilitada, você pode armazenar em buffer imagens em movimento 
; e analisá-las à medida que a CPU se torna disponível. 
; Por exemplo, se um carro passar pela câmera em 10 quadros, 
; mas a CPU puder analisar apenas 3 desses quadros nesse período, 
; o buffer permitirá que você analise todos os 10 quadros. 
; Quando a atividade cessa, o processo ALPR drena o buffer, procurando placas durante o período de movimentação. 
; Aumentar o buffer_size aumenta a duração desse período, mas também consumirá mais memória. 
; A unidade camera_buffer_size é o número de quadros de imagem.

; Number of frames to buffer in memory.  
camera_buffer_size = 10
; ============================================================================


; Enables serialization of the JPEG plate crop in the JSON data
serialize_jpeg_crop = 1

; JPEG crop quality for base64 encoding plate images  sent with the plate group JSON (1 to 100)
serialize_jpeg_crop_quality_plates = 75

; JPEG crop quality for base64 encoding vehicle images sent with the plate group JSON (1 to 100)
serialize_jpeg_crop_quality_vehicles = 55

; Include a downsampled overlay image in the JSON data (default disabled).  
; The default max resolution is 560x315 and JPEG compression level 55
serialize_jpeg_overview_image_enabled = 0

; Specify a maximum input rate for video streams.  Use a value of -1 for unlimited.
; This helps reduce the processing overhead if there are insufficient CPU resources to 
; process the full framerate.  
; Note, OpenALPR still must decode the H264 stream at full framerate, 
; but the frames are dropped after that. 
; If possible, it is better to reduce the framerate being pulled from the camera
max_fps = -1


; Configure CPU or Nvidia GPU acceleration. 
; ============================================================================
; Values are:
; -1 = Use value from openalpr.conf
; 0 = CPU
; 1 = Nvidia GPU
hardware_acceleration = 1

; If using Nvidia GPU acceleration, assign the GPU ID used for processing (default is 0)
; Multiple GPUs can be used by separating the IDs with a comma (e.g., 0,1,2 would use three GPUs with those IDs)
; Batch size configures how many images to process in parallel
gpu_id = 0
gpu_batch_size = 5

; Generate debug output in the event of a crash (Linux only)
; If set to 1, the software automatically uploads crash information to OpenALPR's servers to help us improve the software
core_dumps = 0

; The maximum uptime can be configured to force the agent to restart after a period of time.  Upon exiting the system
; will restart the service automatically. 
; On Linux the default behavior is to never restart (-1). 
; On Windows, the default is a restart every week
max_uptime_seconds = -1

; Location to store variable data while the program is running such as image snapshots, video masks, etc.
; default is var/lib/openalpr/
alpr_data_dir = /var/lib/openalpr/


; GPS latitude/longitude
; ============================================================================
; GPS latitude/longitude values can either be a fixed position (i.e., a numeric value)
; or can be set to "auto" to attempt to get the value from a USB GPS device
; gps_latitude = 0.0
; gps_longitude = 0.0

; Alternatively, you may use the local webservice to set the GPS coordinates at runtime.
; Set this value to 1 to enable
; This is useful for a mobile application where the GPS coordinates change
; Send an HTTP GET request to the local webservice (default port 8355) in the following format:
; http://localhost:8355/gps/set?latitude=-77.0365&longitude=38.8977
; gps_use_webservice = 0
